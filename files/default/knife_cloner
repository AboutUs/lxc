#!/opt/chef/embedded/bin/ruby

require 'json'

LXC_HOME = '/var/lib/lxc'
lxc_name = ARGV.first

def ensure_name_availability!(name)
  current_names = Dir.glob(File.join(LXC_HOME, '*')).map{|c| File.basename(c)}
  raise 'Name already in use' if current_names.include?(name)
end

def available_ips
  conf = JSON.load(File.read('/etc/knife-lxc/config.json'))
  # TODO: Add range calculation
  conf['addresses']['static']
end

def used_ips
  Dir.glob(File.join(LXC_HOME, '*')).map{ |ctn|
    if(File.exists?(config_path = File.join(ctn, 'config')))
      config = File.readlines(config_path)
      ip = config.detect{|l| l.include?('ipv4')}.to_s.split('=').last.to_s.strip
      ip.empty? ? nil : ip
    end
  }.compact
end

def update_container_ip(name)
  new_ip = (available_ips - used_ips).pop
  raise 'no ips available' unless new_ip
  config_path = File.join(LXC_HOME, name, 'config')
  config = File.readlines(config_path).map(&:strip)
  idx = config.find_index{|l| l.include?('ipv4')}
  if(idx)
    parts = config[idx].split('=').map(&:strip)
    parts[1] = new_ip
    config[idx] = parts.join(' = ')
  else
    idx = config.find_index{|l| l.include?('hwaddr')}
    config.insert(idx, "lxc.network.ipv4 = #{new_ip}")
  end
  File.open(config_path, 'w') do |file|
    file.write config.join("\n")
  end
  true
end

def clone_container(name)
  %x{lxc-clone -o knife_base -n #{name}}
end

def start_container(name)
  %x{lxc-start -n #{name} -d}
  %x{lxc-wait -n #{name} -s RUNNING}
end

ensure_name_availability!(lxc_name)
clone_container(lxc_name)
update_container_ip(lxc_name)
start_container(lxc_name)
